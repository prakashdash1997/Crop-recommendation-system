# -*- coding: utf-8 -*-
"""Crop recommendation system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LhE_MCHZUK6LmQEZdtv7ZW6RiKS7x0Hd
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df= pd.read_csv("/content/Crop_recommendation[1].csv")
print(df)

df.describe

df.info()

df.head(5)

df.tail(5)

df.shape

df.columns

df.duplicated().sum()

df.isnull().sum()

df.nunique()

df["label"].unique()

df["label"].value_counts()

sns.pairplot(df)

crop_summary_med=pd.pivot_table(df,index=['label'],aggfunc='median')
print(crop_summary_med)

#crop_summary_mean=pd.pivot_table(df,index=['label'],aggfunc='mean')
#print(crop_summary_mean)

correlation=df.corr()
sns.heatmap(correlation, xticklabels= correlation.columns, yticklabels=correlation.columns, annot= True)

import plotly.express as px

px.box(df,y="N", points='all')

px.box(df,y="P", points='all')

px.box(df,y="K", points='all')

px.box(df,y="ph", points='all')

px.box(df,y="humidity", points='all')

px.box(df,y="rainfall", points='all')

high_bound = df['N'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['N'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['N']>=low_bound) & (df['N']<=high_bound)]

high_bound = df['P'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['P'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['P']>=low_bound) & (df['P']<=high_bound)]

high_bound = df['K'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['K'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['K']>=low_bound) & (df['K']<=high_bound)]

high_bound = df['ph'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['ph'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['ph']>=low_bound) & (df['ph']<=high_bound)]

high_bound = df['humidity'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['humidity'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['humidity']>=low_bound) & (df['humidity']<=high_bound)]

high_bound = df['rainfall'].quantile(0.999)
print('high_bound :', high_bound)
low_bound = df['rainfall'].quantile(0.001)
print('low_bound :', low_bound)

df = df[(df['rainfall']>=low_bound) & (df['rainfall']<=high_bound)]

sns.jointplot(x="rainfall",y="humidity",data=df[(df['temperature']<30) & (df['rainfall']>120)],hue="label")

sns.jointplot(x="K",y="N",data=df[(df['N']>40)&(df['K']>40)],hue="label")



sns.jointplot(x="K",y="humidity",data=df,hue='label',size=8,s=30,alpha=0.7)

sns.boxplot(y='label',x='ph',data=df)

X=df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y=df['label']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=1)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, fbeta_score

from sklearn.metrics import classification_report

#from sklearn.preprocessing import StandardScaler
#sc= StandardScaler()
#X_train_scaled= sc.fit_transform(X_train)
#X_train

#X_test_scaled = sc.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

y_knn= knn.predict(X_test)

print(accuracy_score(y_test,y_knn))

print(classification_report(y_test,y_knn))

from sklearn.ensemble import GradientBoostingClassifier
clf=GradientBoostingClassifier()

clf.fit(X_train,y_train)

y_gb=clf.predict(X_test)

print(classification_report(y_test,y_gb))

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(max_depth=2)

rfc.fit(X_train,y_train)

y_rfc=rfc.predict(X_test)

print(classification_report(y_test,y_rfc))

from sklearn.linear_model import LogisticRegression
lr= LogisticRegression(random_state=0)

lr.fit(X_train,y_train)

y_lr=lr.predict(X_test)

print(classification_report(y_test,y_lr))

X_test[0:1]

"""**CROP RECOMMENDATION SYSTEM**"""

data = {
    "N": [65],
    "P": [39],
    "K": [45],
    "temperature": [23.668054],
    "humidity": [70.668054],
    "ph": [6.768001],
    "rainfall": [184.463328]
}
crop=pd.DataFrame(data)
print(crop)

y=knn.predict(crop)
print(y)